package workspace

import (
	"encoding/json"
	"errors"
	"net/http"
	"strconv"
	"time"

	"github.com/agent-auth/agent-auth-api/database/dbmodels"
	"github.com/agent-auth/agent-auth-api/pkg/authz"
	_ "github.com/agent-auth/agent-auth-api/web/interfaces/v1/errorinterface" // docs is generated by Swag CLI, you have to import it.
	"github.com/agent-auth/agent-auth-api/web/renderers"
	"github.com/go-chi/chi"
	"github.com/go-chi/render"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.uber.org/zap"
)

// @Description Workspace request model
type WorkspaceRequest struct {
	*dbmodels.Workspace
}

func (w *WorkspaceRequest) Bind(r *http.Request) error {
	return w.Workspace.Validate()
}

// @Description Workspace response model
type WorkspaceResponse struct {
	*dbmodels.Workspace
}

// @Description Workspaces list response model
type WorkspacesResponse struct {
	Workspaces []*dbmodels.Workspace `json:"workspaces"`
}
type AddMemberRequest struct {
	MemberID string `json:"memberID"`
}

// @Summary Add member to workspace
// @Description Adds a new member to a workspace (owner only)
// @Tags workspaces
// @Accept json
// @Produce json
// @Param workspace_id path string true "Workspace ID"
// @Param member body AddMemberRequest true "Member ID to add"
// @Success 204 "No Content"
// @Failure 400 {object} errorinterface.ErrorResponse{}
// @Failure 401 {object} errorinterface.ErrorResponse{}
// @Failure 404 {object} errorinterface.ErrorResponse{}
// @Failure 500 {object} errorinterface.ErrorResponse{}
// @Router /workspaces/{workspace_id}/members [post]
// @Security BearerAuth
func (ws *workspaceService) AddMember(w http.ResponseWriter, r *http.Request) {
	email, _ := authz.GetEmailFromClaims(r)

	// Convert email to ObjectID
	ownerID, err := primitive.ObjectIDFromHex(email)
	if err != nil {
		ws.logger.Error("failed to convert email to ObjectID", zap.Error(err))
		render.Render(w, r, renderers.ErrorBadRequest(ErrIncompleteDetails))
		return
	}

	workspaceID, err := primitive.ObjectIDFromHex(chi.URLParam(r, "workspace_id"))
	if err != nil {
		ws.logger.Error("invalid workspace ID", zap.Error(err))
		render.Render(w, r, renderers.ErrorBadRequest(ErrIncompleteDetails))
		return
	}

	var req AddMemberRequest

	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		ws.logger.Error("failed to decode request", zap.Error(err))
		render.Render(w, r, renderers.ErrorBadRequest(ErrIncompleteDetails))
		return
	}

	memberID, err := primitive.ObjectIDFromHex(req.MemberID)
	if err != nil {
		ws.logger.Error("invalid member ID", zap.Error(err))
		render.Render(w, r, renderers.ErrorBadRequest(ErrIncompleteDetails))
		return
	}

	// Verify ownership
	workspace, err := ws.workspaceDal.GetByID(workspaceID)
	if err != nil {
		ws.logger.Error("failed to get workspace", zap.Error(err))
		render.Render(w, r, renderers.ErrorNotFound(ErrNotFound))
		return
	}

	if workspace.OwnerID != ownerID {
		ws.logger.Error("unauthorized add member attempt", zap.String("userID", ownerID.Hex()))
		render.Render(w, r, renderers.ErrorUnauthorized(ErrUnauthorized))
		return
	}

	// Check if member already exists
	for _, existingMember := range workspace.Members {
		if existingMember == memberID {
			render.Status(r, http.StatusNoContent) // Member already exists, return success
			return
		}
	}

	if err := ws.workspaceDal.AddMember(workspaceID, memberID); err != nil {
		ws.logger.Error("failed to add member", zap.Error(err))
		render.Render(w, r, renderers.ErrorInternalServerError(err))
		return
	}

	render.Status(r, http.StatusNoContent)
}

// @Summary Remove member from workspace
// @Description Removes a member from a workspace (owner only)
// @Tags workspaces
// @Accept json
// @Produce json
// @Param workspace_id path string true "Workspace ID"
// @Param member_id path string true "Member ID"
// @Success 204 "No Content"
// @Failure 400 {object} errorinterface.ErrorResponse{}
// @Failure 401 {object} errorinterface.ErrorResponse{}
// @Failure 404 {object} errorinterface.ErrorResponse{}
// @Failure 500 {object} errorinterface.ErrorResponse{}
// @Router /workspaces/{workspace_id}/members/{member_id} [delete]
// @Security BearerAuth
func (ws *workspaceService) RemoveMember(w http.ResponseWriter, r *http.Request) {
	email, _ := authz.GetEmailFromClaims(r)

	// Convert email to ObjectID
	ownerID, err := primitive.ObjectIDFromHex(email)
	if err != nil {
		ws.logger.Error("failed to convert email to ObjectID", zap.Error(err))
		render.Render(w, r, renderers.ErrorBadRequest(ErrIncompleteDetails))
		return
	}

	workspaceID, err := primitive.ObjectIDFromHex(chi.URLParam(r, "workspace_id"))
	if err != nil {
		ws.logger.Error("invalid workspace ID", zap.Error(err))
		render.Render(w, r, renderers.ErrorBadRequest(ErrIncompleteDetails))
		return
	}

	memberID, err := primitive.ObjectIDFromHex(chi.URLParam(r, "member_id"))
	if err != nil {
		ws.logger.Error("invalid member ID", zap.Error(err))
		render.Render(w, r, renderers.ErrorBadRequest(ErrIncompleteDetails))
		return
	}

	// Verify ownership
	workspace, err := ws.workspaceDal.GetByID(workspaceID)
	if err != nil {
		ws.logger.Error("failed to get workspace", zap.Error(err))
		render.Render(w, r, renderers.ErrorNotFound(ErrNotFound))
		return
	}

	if workspace.OwnerID != ownerID {
		ws.logger.Error("unauthorized remove member attempt", zap.String("userID", ownerID.Hex()))
		render.Render(w, r, renderers.ErrorUnauthorized(ErrUnauthorized))
		return
	}

	if memberID == workspace.OwnerID {
		ws.logger.Error("attempt to remove workspace owner", zap.String("workspaceID", workspaceID.Hex()))
		render.Render(w, r, renderers.ErrorBadRequest(errors.New("cannot remove workspace owner")))
		return
	}

	if err := ws.workspaceDal.RemoveMember(workspaceID, memberID); err != nil {
		ws.logger.Error("failed to remove member", zap.Error(err))
		render.Render(w, r, renderers.ErrorInternalServerError(err))
		return
	}

	render.Status(r, http.StatusNoContent)
}

// @Summary Create workspace
// @Description Creates a new workspace
// @Tags workspaces
// @Accept json
// @Produce json
// @Param workspace body WorkspaceRequest true "Workspace details"
// @Success 200 {object} WorkspaceResponse
// @Failure 400 {object} errorinterface.ErrorResponse
// @Failure 500 {object} errorinterface.ErrorResponse
// @Router /workspaces [post]
// @Security BearerAuth
func (ws *workspaceService) Create(w http.ResponseWriter, r *http.Request) {
	email, _ := authz.GetEmailFromClaims(r)

	workspace := &WorkspaceRequest{
		Workspace: &dbmodels.Workspace{},
	}

	if err := render.Bind(r, workspace); err != nil {
		ws.logger.Error("failed to bind workspace request", zap.Error(err))
		render.Render(w, r, renderers.ErrorBadRequest(ErrIncompleteDetails))
		return
	}

	workspace.Workspace.CreatedTimestampUTC = time.Now().UTC()
	workspace.Workspace.UpdatedTimestampUTC = time.Now().UTC()

	// Convert email to ObjectID
	ownerID, err := primitive.ObjectIDFromHex(email)
	if err != nil {
		ws.logger.Error("failed to convert email to ObjectID", zap.Error(err))
		render.Render(w, r, renderers.ErrorBadRequest(ErrIncompleteDetails))
		return
	}

	workspace.Workspace.OwnerID = ownerID
	workspace.Workspace.Members = []primitive.ObjectID{ownerID}

	resp, err := ws.workspaceDal.Create("", workspace.Workspace)
	if err != nil {
		ws.logger.Error("failed to create workspace", zap.Error(err))
		render.Render(w, r, renderers.ErrorInternalServerError(err))
		return
	}

	render.Respond(w, r, &WorkspaceResponse{
		Workspace: resp,
	})
}

// @Summary Get workspace
// @Description Gets a workspace by ID
// @Tags workspaces
// @Accept json
// @Produce json
// @Param workspace_id path string true "Workspace ID"
// @Success 200 {object} WorkspaceResponse
// @Failure 400 {object} errorinterface.ErrorResponse
// @Failure 404 {object} errorinterface.ErrorResponse
// @Failure 500 {object} errorinterface.ErrorResponse
// @Router /workspaces/{workspace_id} [get]
// @Security BearerAuth
func (ws *workspaceService) Get(w http.ResponseWriter, r *http.Request) {
	workspaceID, err := primitive.ObjectIDFromHex(chi.URLParam(r, "workspace_id"))
	if err != nil {
		ws.logger.Error("invalid workspace ID", zap.Error(err))
		render.Render(w, r, renderers.ErrorBadRequest(ErrIncompleteDetails))
		return
	}

	workspace, err := ws.workspaceDal.GetByID(workspaceID)
	if err != nil {
		ws.logger.Error("failed to get workspace", zap.Error(err))
		render.Render(w, r, renderers.ErrorNotFound(ErrNotFound))
		return
	}

	render.Respond(w, r, &WorkspaceResponse{
		Workspace: workspace,
	})
}

// @Summary Update workspace
// @Description Updates an existing workspace (owner only)
// @Tags workspaces
// @Accept json
// @Produce json
// @Param workspace_id path string true "Workspace ID"
// @Param workspace body WorkspaceRequest true "Updated workspace details"
// @Success 200 {object} WorkspaceResponse
// @Failure 400 {object} errorinterface.ErrorResponse
// @Failure 401 {object} errorinterface.ErrorResponse
// @Failure 404 {object} errorinterface.ErrorResponse
// @Failure 500 {object} errorinterface.ErrorResponse
// @Router /workspaces/{workspace_id} [put]
// @Security BearerAuth
func (ws *workspaceService) Update(w http.ResponseWriter, r *http.Request) {
	email, _ := authz.GetEmailFromClaims(r)

	ownerID, err := primitive.ObjectIDFromHex(email)
	if err != nil {
		ws.logger.Error("failed to convert email to ObjectID", zap.Error(err))
		render.Render(w, r, renderers.ErrorBadRequest(ErrIncompleteDetails))
		return
	}

	workspace := &WorkspaceRequest{
		Workspace: &dbmodels.Workspace{},
	}

	if err := render.Bind(r, workspace); err != nil {
		ws.logger.Error("failed to bind workspace request", zap.Error(err))
		render.Render(w, r, renderers.ErrorBadRequest(ErrIncompleteDetails))
		return
	}

	// Verify ownership
	existing, err := ws.workspaceDal.GetByID(workspace.ID)
	if err != nil {
		ws.logger.Error("failed to get workspace", zap.Error(err))
		render.Render(w, r, renderers.ErrorNotFound(ErrNotFound))
		return
	}

	if existing.OwnerID != ownerID {
		ws.logger.Error("unauthorized update attempt", zap.String("userID", ownerID.Hex()))
		render.Render(w, r, renderers.ErrorUnauthorized(ErrUnauthorized))
		return
	}

	workspace.Workspace.UpdatedTimestampUTC = time.Now().UTC()

	if err := ws.workspaceDal.Update(workspace.Workspace); err != nil {
		ws.logger.Error("failed to update workspace", zap.Error(err))
		render.Render(w, r, renderers.ErrorInternalServerError(err))
		return
	}

	render.Respond(w, r, &WorkspaceResponse{
		Workspace: workspace.Workspace,
	})
}

// @Summary Delete workspace
// @Description Deletes a workspace (owner only)
// @Tags workspaces
// @Accept json
// @Produce json
// @Param workspace_id path string true "Workspace ID"
// @Success 204 "No Content"
// @Failure 400 {object} errorinterface.ErrorResponse
// @Failure 401 {object} errorinterface.ErrorResponse
// @Failure 404 {object} errorinterface.ErrorResponse
// @Failure 500 {object} errorinterface.ErrorResponse
// @Router /workspaces/{workspace_id} [delete]
// @Security BearerAuth
func (ws *workspaceService) Delete(w http.ResponseWriter, r *http.Request) {
	email, _ := authz.GetEmailFromClaims(r)

	// Convert email to ObjectID
	ownerID, err := primitive.ObjectIDFromHex(email)
	if err != nil {
		ws.logger.Error("failed to convert email to ObjectID", zap.Error(err))
		render.Render(w, r, renderers.ErrorBadRequest(ErrIncompleteDetails))
		return
	}

	workspaceID, err := primitive.ObjectIDFromHex(chi.URLParam(r, "workspace_id"))
	if err != nil {
		ws.logger.Error("invalid workspace ID", zap.Error(err))
		render.Render(w, r, renderers.ErrorBadRequest(ErrIncompleteDetails))
		return
	}

	// Verify ownership
	existing, err := ws.workspaceDal.GetByID(workspaceID)
	if err != nil {
		ws.logger.Error("failed to get workspace", zap.Error(err))
		render.Render(w, r, renderers.ErrorNotFound(ErrNotFound))
		return
	}

	if existing.OwnerID != ownerID {
		ws.logger.Error("unauthorized delete attempt", zap.String("userID", ownerID.Hex()))
		render.Render(w, r, renderers.ErrorUnauthorized(ErrUnauthorized))
		return
	}

	if err := ws.workspaceDal.Delete(workspaceID); err != nil {
		ws.logger.Error("failed to delete workspace", zap.Error(err))
		render.Render(w, r, renderers.ErrorInternalServerError(err))
		return
	}

	render.Status(r, http.StatusNoContent)
}

// @Summary List workspaces
// @Description Lists all workspaces with pagination
// @Tags workspaces
// @Accept json
// @Produce json
// @Param skip query integer false "Number of records to skip" default(0)
// @Param limit query integer false "Number of records to return" default(10)
// @Success 200 {object} WorkspacesResponse
// @Failure 500 {object} errorinterface.ErrorResponse
// @Router /workspaces [get]
// @Security BearerAuth
func (ws *workspaceService) List(w http.ResponseWriter, r *http.Request) {
	skip, err := strconv.ParseInt(r.URL.Query().Get("skip"), 10, 64)
	if err != nil {
		skip = 0
	}
	if skip < 0 {
		skip = 0
	}

	limit, err := strconv.ParseInt(r.URL.Query().Get("limit"), 10, 64)
	if err != nil {
		limit = 10 // default limit
	}
	if limit <= 0 || limit > 100 {
		limit = 10 // enforce reasonable limits
	}

	workspaces, err := ws.workspaceDal.List(skip, limit)
	if err != nil {
		ws.logger.Error("failed to list workspaces", zap.Error(err))
		render.Render(w, r, renderers.ErrorInternalServerError(err))
		return
	}

	render.Respond(w, r, &WorkspacesResponse{
		Workspaces: workspaces,
	})
}
