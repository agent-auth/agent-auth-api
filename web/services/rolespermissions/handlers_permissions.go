package rolespermissions

import (
	"encoding/json"
	"net/http"

	_ "github.com/agent-auth/agent-auth-api/web/interfaces/v1/errorinterface" // docs is generated by Swag CLI, you have to import it.
	"github.com/agent-auth/agent-auth-api/web/renderers"
	"github.com/go-chi/chi"
	"github.com/go-chi/render"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.uber.org/zap"
)

// @Summary Update permission attribute
// @Description Updates a specific attribute of a permission
// @Tags permissions
// @Accept json
// @Produce json
// @Param permission_id path string true "Permission ID"
// @Param attribute body UpdateAttributeRequest true "Attribute update details"
// @Success 204 "No Content"
// @Failure 400 {object} errorinterface.ErrorResponse
// @Failure 404 {object} errorinterface.ErrorResponse
// @Router /{workspace_id}/{project_id}/roles/{role_id}/permissions [put]
// @Security BearerAuth
func (rp *rolesService) UpdatePermission(w http.ResponseWriter, r *http.Request) {
	roleID, err := primitive.ObjectIDFromHex(chi.URLParam(r, "role_id"))
	if err != nil {
		rp.logger.Error("invalid role ID", zap.Error(err))
		render.Render(w, r, renderers.ErrorBadRequest(ErrIncompleteDetails))
		return
	}

	var req UpdateAttributeRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		rp.logger.Error("failed to decode request", zap.Error(err))
		render.Render(w, r, renderers.ErrorBadRequest(ErrIncompleteDetails))
		return
	}

	if err := rp.rolesDal.UpdatePermission(roleID, req.Path, req.Value); err != nil {
		rp.logger.Error("failed to update permission attribute", zap.Error(err))
		render.Render(w, r, renderers.ErrorNotFound(ErrNotFound))
		return
	}

	render.Status(r, http.StatusNoContent)
}

// @Summary Remove permission attribute
// @Description Removes a specific attribute from a permission
// @Tags permissions
// @Accept json
// @Produce json
// @Param permission_id path string true "Permission ID"
// @Param path path string true "Attribute path"
// @Success 204 "No Content"
// @Failure 400 {object} errorinterface.ErrorResponse
// @Failure 404 {object} errorinterface.ErrorResponse
// @Router /{workspace_id}/{project_id}/roles/{role_id}/permissions [delete]
// @Security BearerAuth
func (rp *rolesService) RemovePermission(w http.ResponseWriter, r *http.Request) {
	roleID, err := primitive.ObjectIDFromHex(chi.URLParam(r, "role_id"))
	if err != nil {
		rp.logger.Error("invalid permission ID", zap.Error(err))
		render.Render(w, r, renderers.ErrorBadRequest(ErrIncompleteDetails))
		return
	}

	var req UpdateAttributeRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		rp.logger.Error("failed to decode request", zap.Error(err))
		render.Render(w, r, renderers.ErrorBadRequest(ErrIncompleteDetails))
		return
	}

	path := req.Path
	if path == "" {
		rp.logger.Error("path parameter is required")
		render.Render(w, r, renderers.ErrorBadRequest(ErrIncompleteDetails))
		return
	}

	if err := rp.rolesDal.RemovePermission(roleID, path); err != nil {
		rp.logger.Error("failed to remove permission attribute", zap.Error(err))
		render.Render(w, r, renderers.ErrorNotFound(ErrNotFound))
		return
	}

	render.Status(r, http.StatusNoContent)
}
