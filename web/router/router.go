// Package api configures an http server for administration and application resources.

package router

import (
	"fmt"
	"os"

	swagger "github.com/swaggo/http-swagger"

	_ "github.com/agent-auth/agent-auth-api/web/docs" // docs is generated by Swag CLI, you have to import it.
	"github.com/agent-auth/agent-auth-api/web/services/health"
	"github.com/agent-auth/agent-auth-api/web/services/v1/resourceservice"
	"github.com/go-chi/chi"
)

type router struct {
	health          health.Health
	resourceService resourceservice.ResourceService
}

// NewRouter returns the router implementation
func NewRouter() Router {
	svc, err := resourceservice.NewResourceService(
		os.Getenv("KEYCLOAK_URL"),
		os.Getenv("KEYCLOAK_TOKEN"),
	)
	if err != nil {
		panic(fmt.Sprintf("failed to create resource service: %v", err))
	}

	return &router{
		health:          health.NewHealth(),
		resourceService: svc,
	}
}

// Router configures application resources and routes.
func (router *router) Router(enableCORS bool) *chi.Mux {
	// ==================== Public Router ======================
	r := chi.NewRouter()

	// use CORS middleware if client is not served by this api, e.g. from other domain or CDN
	if enableCORS {
		r.Use(corsConfig().Handler)
	}

	// =================  health routes ======================
	r.Get("/health", router.health.GetHealth)

	// ================= API Documentation ====================
	r.Get("/swagger/*", swagger.Handler())

	// =================  resource routes ======================
	prefix := "/{workspace_id}/{project_id}/oauth/resources"
	r.Post(prefix, router.resourceService.Create)
	r.Get(prefix, router.resourceService.List)
	r.Get(prefix+"/{resource_id}", router.resourceService.Get)
	r.Put(prefix+"/{resource_id}", router.resourceService.Update)
	r.Delete(prefix+"/{resource_id}", router.resourceService.Delete)

	return r
}
