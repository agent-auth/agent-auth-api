// Package api configures an http server for administration and application resources.

package router

import (
	"fmt"
	"net/url"
	"os"

	swagger "github.com/swaggo/http-swagger"

	"github.com/agent-auth/agent-auth-api/pkg/authz"
	// _ "github.com/agent-auth/agent-auth-api/web/docs" // docs is generated by Swag CLI, you have to import it.
	"github.com/agent-auth/agent-auth-api/web/services/health"
	"github.com/agent-auth/agent-auth-api/web/services/projects"
	"github.com/agent-auth/agent-auth-api/web/services/resources"
	"github.com/agent-auth/agent-auth-api/web/services/roles_permissions"
	"github.com/agent-auth/agent-auth-api/web/services/workspaces"
	"github.com/go-chi/chi"
)

type router struct {
	health           health.Health
	resourceService  resources.ResourceService
	tokenProvider    authz.TokenProvider
	workspaceService workspaces.WorkspaceService
	rolesService     roles_permissions.RolesService
	projectService   projects.ProjectService
}

// NewRouter returns the router implementation
func NewRouter() Router {
	// Validate required environment variables
	requiredEnvVars := map[string]string{
		"KEYCLOAK_URL":      os.Getenv("KEYCLOAK_URL"),
		"KEYCLOAK_TOKEN":    os.Getenv("KEYCLOAK_TOKEN"),
		"API_AUTH_JWKS_URL": os.Getenv("API_AUTH_JWKS_URL"),
	}

	// Check for missing required variables
	for name, value := range requiredEnvVars {
		if value == "" {
			panic(fmt.Sprintf("%s is required", name))
		}
	}

	// Validate URL format for relevant variables
	urlVars := map[string]string{
		"KEYCLOAK_URL":      requiredEnvVars["KEYCLOAK_URL"],
		"API_AUTH_JWKS_URL": requiredEnvVars["API_AUTH_JWKS_URL"],
	}

	for name, value := range urlVars {
		if _, err := url.Parse(value); err != nil {
			panic(fmt.Sprintf("%s is invalid: %v", name, err))
		}
	}

	return &router{
		health:          health.NewHealth(),
		resourceService: resources.NewResourceService(),
		tokenProvider: *authz.NewTokenProvider(
			requiredEnvVars["API_AUTH_JWKS_URL"],
		),
		workspaceService: workspaces.NewWorkspaceService(),
		rolesService:     roles_permissions.NewRolesService(),
		projectService:   projects.NewProjectService(),
	}
}

// Router configures application resources and routes.
func (router *router) Router(enableCORS bool) *chi.Mux {
	r := chi.NewRouter()

	// use CORS middleware if client is not served by this api, e.g. from other domain or CDN
	if enableCORS {
		r.Use(corsConfig().Handler)
	}

	// =================  health routes ======================
	r.Get("/health", router.health.GetHealth)

	// ================= API Documentation ====================
	r.Get("/swagger/*", swagger.Handler())

	protected := chi.NewRouter()
	protected.Use(authz.AuthMiddleware(
		&router.tokenProvider,
		os.Getenv("API_AUTH_AUDIENCE"),
		os.Getenv("API_AUTH_ISSUER"),
	))

	// Add workspace routes
	protected.Route("/workspaces", func(r chi.Router) {
		// Workspace Admin routes
		r.With(authz.RequireRoles(authz.WorkspaceAdmin, authz.SystemAdmin)).
			Group(func(r chi.Router) {
				r.Post("/", router.workspaceService.Create)
				r.Put("/{workspace_id}", router.workspaceService.Update)
				r.Delete("/{workspace_id}", router.workspaceService.Delete)
			})

		// Viewer routes (and above)
		r.With(authz.RequireRoles(
			authz.AppViewer,
			authz.AppDeveloper,
			authz.AppAdmin,
			authz.WorkspaceAdmin,
			authz.SystemAdmin,
		)).Group(func(r chi.Router) {
			r.Get("/", router.workspaceService.List)
			r.Get("/{workspace_id}", router.workspaceService.Get)
		})
	})

	// Path for all project operations
	protected.Route("/projects", func(r chi.Router) {
		r.With(authz.RequireRoles(authz.WorkspaceAdmin, authz.SystemAdmin, authz.AppAdmin)).
			Group(func(r chi.Router) {
				r.Post("/", router.projectService.Create)
				r.Put("/{project_id}", router.projectService.Update)
				r.Delete("/{project_id}", router.projectService.Delete)
			})

		r.With(authz.RequireRoles(
			authz.WorkspaceAdmin,
			authz.SystemAdmin,
			authz.AppViewer,
			authz.AppDeveloper,
			authz.AppAdmin,
		)).Group(func(r chi.Router) {
			r.Get("/", router.projectService.List)
			r.Get("/{project_id}", router.projectService.Get)
		})
	})

	// Add roles and permissions routes
	protected.Route("/projects/{project_id}/roles", func(r chi.Router) {
		r.With(authz.RequireRoles(authz.WorkspaceAdmin, authz.SystemAdmin, authz.AppAdmin, authz.AppDeveloper)).
			Group(func(r chi.Router) {
				r.Post("/", router.rolesService.CreateRole)
				r.Delete("/", router.rolesService.DeleteRolesByProject)
				r.Delete("/{role_id}", router.rolesService.DeleteRole)
			})

		r.With(authz.RequireRoles(authz.WorkspaceAdmin, authz.SystemAdmin, authz.AppAdmin, authz.AppDeveloper)).
			Group(func(r chi.Router) {
				r.Put("/{role_id}/permissions", router.rolesService.UpdatePermission)
			})

		r.With(authz.RequireRoles(
			authz.WorkspaceAdmin,
			authz.SystemAdmin,
			authz.AppAdmin,
			authz.AppDeveloper,
			authz.AppViewer,
		)).Group(func(r chi.Router) {
			r.Get("/", router.rolesService.GetRolesByProject)
			r.Get("/{role_id}", router.rolesService.GetRole)
		})
	})

	// Path for all resource operations
	protected.Route("/projects/{project_id}/resources", func(r chi.Router) {
		r.With(authz.RequireRoles(authz.WorkspaceAdmin, authz.SystemAdmin, authz.AppAdmin, authz.AppDeveloper)).
			Group(func(r chi.Router) {
				r.Post("/", router.resourceService.Create)
				r.Put("/{resource_id}", router.resourceService.Update)
				r.Delete("/{resource_id}", router.resourceService.Delete)
			})

		r.With(authz.RequireRoles(
			authz.WorkspaceAdmin,
			authz.SystemAdmin,
			authz.AppAdmin,
			authz.AppDeveloper,
			authz.AppViewer,
		)).Group(func(r chi.Router) {
			r.Get("/", router.resourceService.ListByProject)
			r.Get("/{resource_id}", router.resourceService.Get)
		})
	})

	// Scoped routes can be added similarly if needed
	r.Mount("/", protected)
	return r
}
